apply plugin: 'java'

sourceSets {
    main {
        resources {
            srcDir 'dist'
        }
    }
}

/**
 * Install all Node/Grunt dependencies defined in package.json
 */
task npm(type: Exec) {
    group = "Build"
    description = "Installs all Node/Grunt dependencies defined in package.json"
    commandLine = ["npm", "install", "--save-dev"]
    inputs.file "package.json"
    outputs.dir "node_modules"
}

/**
 * Install all Bower dependencies defined in bower.json
 */
task bower(type: Exec, dependsOn: npm) {
    group = "Build"
    description = "Installs all Bower dependencies defined in bower.json"
    commandLine = ["bower", "install"]
    inputs.file "bower.json"
    outputs.dir "app/components"
}

/**
 * Build JavaScript, equivalent of 'grunt build'.
 */
task buildjs(type: GruntTask, dependsOn: bower) {
    group = "Build"
    description = "Assembles and tests JS of this project."
    gruntArgs = "build"
    inputs.dir "app"
    inputs.file file("Gruntfile.js")
    outputs.dir "dist"
}
jar.dependsOn buildjs

/**
 * Clean JavaScript, equivalent of 'grunt clean'.
 */
task cleanjs(type: GruntTask) {
    group = "Clean"
    description = "Clean JS build of this project."
    gruntArgs = "clean"
}
clean.dependsOn cleanjs

//
// Gradle Extensions
//

import org.apache.tools.ant.taskdefs.condition.Os

/**
 * Define GruntTask
 */
class GruntTask extends Exec {

    private String gruntExecutable = Os.isFamily(Os.FAMILY_WINDOWS) ? "grunt.cmd" : "grunt"

    def gruntArgs = ""

    public GruntTask() {
        super()
        this.setExecutable(gruntExecutable)
    }

    public void setGruntArgs(String gruntArgs) {
        this.args = "$gruntArgs".trim().split(" ") as List
    }
}